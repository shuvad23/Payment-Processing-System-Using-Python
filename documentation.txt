Project Title: Polymorphic Payment Processing System
Objective:
    To create a polymorphic payment processing system that can handle 
    different payment methods such as Credit Card, PayPal, 
    and Cryptocurrency by leveraging object-oriented principles 
    like polymorphism and inheritance.

Features:
    1.Polymorphic Payment Methods:
        CreditCardPayment
        PayPalPayment
        CryptoPayment
    2.Transaction Handling:
        Process payments using different strategies.
        Generate receipts dynamically.
    3.Logging and Reporting:
        Track transaction history.
        Generate reports based on payment type.
    4.Error Handling:
        Handle failed transactions gracefully.

Advanced Enhancements:
Logging System:
    Use Python's logging module to track transactions.
Database Integration:
    Store transactions in a SQLite or PostgreSQL database.
Exception Handling:
    Handle invalid inputs, insufficient funds, etc.
Unit Testing:
    Use unittest to write test cases for each payment type.


extra note-----------------------------------------
        Key Features of This Implementation:
            ✅ Strategy Pattern: Payment processing logic is decoupled from the main application.
            ✅ Polymorphism: PaymentProcessor can work with any PaymentStrategy without modification.
            ✅ Encapsulation: Each payment method handles its own implementation details.
            ✅ Flexibility: Easily extendable by adding more payment strategies (e.g., BankTransferPayment, ApplePayPayment).